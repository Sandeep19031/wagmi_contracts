{
	"compiler": {
		"version": "0.8.7+commit.e28d00a7"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "userAddress",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address payable",
						"name": "relayerAddress",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "bytes",
						"name": "functionSignature",
						"type": "bytes"
					}
				],
				"name": "MetaTransactionExecuted",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "userAddress",
						"type": "address"
					},
					{
						"internalType": "bytes",
						"name": "functionSignature",
						"type": "bytes"
					},
					{
						"internalType": "bytes32",
						"name": "sigR",
						"type": "bytes32"
					},
					{
						"internalType": "bytes32",
						"name": "sigS",
						"type": "bytes32"
					},
					{
						"internalType": "uint8",
						"name": "sigV",
						"type": "uint8"
					}
				],
				"name": "executeMetaTransaction",
				"outputs": [
					{
						"internalType": "bytes",
						"name": "",
						"type": "bytes"
					}
				],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getChainID",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "user",
						"type": "address"
					}
				],
				"name": "getNonce",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "nonce",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "nonce",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "chainID",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "functionSignature",
						"type": "bytes"
					},
					{
						"internalType": "bytes32",
						"name": "sigR",
						"type": "bytes32"
					},
					{
						"internalType": "bytes32",
						"name": "sigS",
						"type": "bytes32"
					},
					{
						"internalType": "uint8",
						"name": "sigV",
						"type": "uint8"
					}
				],
				"name": "verify",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			}
		],
		"devdoc": {
			"details": "This contract has the owner address providing basic authorization control",
			"events": {
				"OwnershipTransferred(address,address)": {
					"details": "Event to show ownership has been transferred",
					"params": {
						"newOwner": "representing the address of the new owner",
						"previousOwner": "representing the address of the previous owner"
					}
				}
			},
			"kind": "dev",
			"methods": {
				"constructor": {
					"details": "The constructor sets the original owner of the contract to the sender account."
				},
				"executeMetaTransaction(address,bytes,bytes32,bytes32,uint8)": {
					"params": {
						"functionSignature": "Signature of the actual function to be called via meta transaction",
						"sigR": "R part of the signature",
						"sigS": "S part of the signature",
						"sigV": "V part of the signature",
						"userAddress": "Address of user trying to do meta transaction"
					}
				},
				"owner()": {
					"details": "Tells the address of the owner",
					"returns": {
						"_0": "the address of the owner"
					}
				},
				"transferOwnership(address)": {
					"details": "Allows the current owner to transfer control of the contract to a newOwner.",
					"params": {
						"newOwner": "The address to transfer ownership to."
					}
				}
			},
			"title": "CustomOwnable",
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"executeMetaTransaction(address,bytes,bytes32,bytes32,uint8)": {
					"notice": "Main function to be called when user wants to execute meta transaction. The actual function to be called should be passed as param with name functionSignature Here the basic signature recovery is being used. Signature is expected to be generated using personal_sign method."
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"upgradeability/CustomOwnable.sol": "CustomOwnable"
		},
		"evmVersion": "london",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@openzeppelin/contracts/utils/math/SafeMath.sol": {
			"keccak256": "0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e",
			"license": "MIT",
			"urls": [
				"bzz-raw://864a40efcffdf408044c332a5aa38ec5618ed7b4eecb8f65faf45671bd6cdc65",
				"dweb:/ipfs/QmQJquTMtc6fgm5JQzGdsGpA2fqBe3MHWEdt2qzaLySMdN"
			]
		},
		"relayer/BasicMetaTransaction.sol": {
			"keccak256": "0x2af4a5d8519b3b23c79000ef2ba6851a36ec99490e27a42687b7aeec52aa7d95",
			"license": "UNLICENSED",
			"urls": [
				"bzz-raw://60a71ba5b876532168e3529916d1fef7dad93a87e783dc8a3f0ea29502055f0b",
				"dweb:/ipfs/QmPPWt8jGGEBna4SeQKa3J1tMf2YPupbhHT9PqdTZFhGEP"
			]
		},
		"upgradeability/CustomOwnable.sol": {
			"keccak256": "0x5d0b05730d2615a6d87bbd0bba7f51574ce74fb5dc11261ed983aec29de2d03f",
			"license": "Apache-2.0",
			"urls": [
				"bzz-raw://82a424b5a00044f5e7300841f14e22ace7fcb40a4ac01d3cbc3ea8eb2575553a",
				"dweb:/ipfs/QmRZ6RY8RmGXeQcFCkc8zeM5KBTmkHdaD5sAtYEVfhipBH"
			]
		}
	},
	"version": 1
}